from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from utils.keyboards import get_admin_keyboard, get_admin_broadcast_keyboard
from utils.states import AdminStates
from database.db_operations import is_admin, get_stats, get_all_active_users, update_quote
from config import ADMIN_IDS
from datetime import datetime

router = Router()

@router.message(Command("admin"))
async def cmd_admin(message: Message):
    """–í—Ö—ñ–¥ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"""
    if message.from_user.id in ADMIN_IDS:
        await message.answer(
            "–í—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ!",
            reply_markup=get_admin_keyboard()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

@router.callback_query(F.data == "admin_stats")
async def process_admin_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    if callback.from_user.id in ADMIN_IDS:
        await callback.answer()
        
        stats = await get_stats()
        total_users = stats['total_users']
        active_users = stats['active_users']
        male_count = stats['male_count']
        female_count = stats['female_count']
        avg_age = stats['avg_age']
        
        await callback.message.answer(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤</b>\n\n"
            f"üë• –í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {total_users}\n"
            f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ: {active_users}\n"
            f"üë® –ß–æ–ª–æ–≤—ñ–∫–∏: {male_count} ({male_count/total_users*100:.1f}%)\n"
            f"üë© –ñ—ñ–Ω–∫–∏: {female_count} ({female_count/total_users*100:.1f}%)\n"
            f"üéÇ –°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–∫: {avg_age:.1f} —Ä–æ–∫—ñ–≤"
        )
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

@router.callback_query(F.data == "admin_broadcast")
async def process_admin_broadcast(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Ä–æ–∑—Å–∏–ª–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if callback.from_user.id in ADMIN_IDS:
        await callback.answer()
        await callback.message.answer(
            "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:\n\n"
            "–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:\n"
            "- <b>–∂–∏—Ä–Ω–∏–π</b>\n"
            "- <i>–∫—É—Ä—Å–∏–≤</i>\n"
            "- <a href='http://example.com'>–ø–æ—Å–∏–ª–∞–Ω–Ω—è</a>"
        )
        await state.set_state(AdminStates.waiting_for_broadcast_text)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

@router.message(AdminStates.waiting_for_broadcast_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    if message.from_user.id in ADMIN_IDS:
        if message.photo:
            file = await message.bot.download(message.photo[-1])
            photo_bytes = file.read()
            await state.update_data({
                "broadcast_type": "photo",
                "photo_bytes": photo_bytes,
                "caption": message.caption or ""
            })
        else:
            await state.update_data({
                "broadcast_type": "text",
                "text": message.text
            })

        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=get_admin_broadcast_keyboard())

@router.callback_query(F.data == "send_broadcast_now")
async def send_broadcast_now(callback: CallbackQuery, state: FSMContext):
    """–í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –Ω–µ–≥–∞–π–Ω–æ (—Ç–µ–∫—Å—Ç –∞–±–æ —Ñ–æ—Ç–æ)"""
    if callback.from_user.id in ADMIN_IDS:
        await callback.answer()

        user_data = await state.get_data()
        broadcast_type = user_data.get("broadcast_type")

        users = await get_all_active_users()
        sent_count = 0
        errors_count = 0

        await callback.message.answer("–†–æ–∑–ø–æ—á–∞—Ç–æ —Ä–æ–∑—Å–∏–ª–∫—É...")

        for user in users:
            try:
                if broadcast_type == "photo":
                    photo_bytes = user_data["photo_bytes"]
                    file = BufferedInputFile(photo_bytes, filename="photo.jpg")
                    await callback.bot.send_photo(
                        chat_id=user.user_id,
                        photo=file,
                        caption=user_data["caption"],
                        parse_mode="HTML"
                    )
                else:
                    await callback.bot.send_message(
                        chat_id=user.user_id,
                        text=user_data["text"],
                        parse_mode="HTML"
                    )
                sent_count += 1
            except Exception as e:
                errors_count += 1
                print(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏ –¥–ª—è {user.user_id}: {e}")

        await callback.message.answer(
            f"–†–æ–∑—Å–∏–ª–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            f"‚úÖ –£—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚ùå –ü–æ–º–∏–ª–∫–∏: {errors_count}"
        )
        await state.clear()
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

@router.callback_query(F.data == "update_quote")
async def process_update_quote(callback: CallbackQuery, state: FSMContext):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ü–∏—Ç–∞—Ç–∏ –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    if callback.from_user.id in ADMIN_IDS:
        await callback.answer()
        await callback.message.answer("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü–∏—Ç–∞—Ç—É –¥–ª—è —â–æ—Ç–∏–∂–Ω–µ–≤–∏—Ö –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:")
        await state.set_state(AdminStates.waiting_for_quote)
    else:
        await callback.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.", show_alert=True)

@router.message(AdminStates.waiting_for_quote)
async def process_new_quote(message: Message, state: FSMContext):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü–∏—Ç–∞—Ç–∏"""
    if message.from_user.id in ADMIN_IDS:
        await update_quote(message.text)
        await message.answer(f"–¶–∏—Ç–∞—Ç—É –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞:\n\n{message.text}")
        await state.clear()
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.")

def register_handlers(dp):
    dp.include_router(router)