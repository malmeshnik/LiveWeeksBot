from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext

from utils.keyboards import (
    get_main_menu_keyboard, 
    get_edit_profile_keyboard, 
    get_gender_keyboard,
    get_confirmation_keyboard,
    get_notification_settings_keyboard
)
from utils.states import ProfileStates
from database.db_operations import (
    get_user, 
    update_user_gender, 
    update_user_birth_date, 
    delete_user_data,
    toggle_notifications,
    get_user_birth
)
from utils.image_generator import generate_life_table
from datetime import datetime

router = Router()

@router.message(F.text == "üìù –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –¥–∞–Ω—ñ")
async def edit_profile(message: Message):
    """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –º–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ—ñ–ª—é"""
    await message.answer(
        "–©–æ —Å–∞–º–µ –≤–∏ —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏?",
        reply_markup=get_edit_profile_keyboard()
    )

@router.callback_query(F.data == "change_gender")
async def change_gender(callback: CallbackQuery, state: FSMContext):
    """–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "–í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç—å:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(ProfileStates.waiting_for_new_gender)

@router.message(ProfileStates.waiting_for_new_gender, F.text.in_(["–ß–æ–ª–æ–≤—ñ–∫", "–ñ—ñ–Ω–∫–∞"]))
async def process_new_gender(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó —Å—Ç–∞—Ç—ñ"""
    gender = message.text
    user_id = message.chat.id
    
    # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—å —É –ë–î
    await update_user_gender(user_id, gender)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await get_user(user_id)
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é
    table_image = generate_life_table(user.birth_date, gender)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–∫ —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
    today = datetime.now().date()
    total_days = (today - user.birth_date).days
    years = total_days // 365
    remaining_days = total_days % 365
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–∂–∏—Ç—ñ —Ç–∏–∂–Ω—ñ
    lived_weeks = total_days // 7
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∂–∏—Ç—Ç—è (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—ñ)
    total_life_days = 72 * 365 if gender == '–ñ—ñ–Ω–∫–∞' else 66 * 365
    days_left = total_life_days - total_days
    lived_text = "–ø—Ä–æ–∂–∏–ª–∞" if user.gender == '–ñ—ñ–Ω–∫–∞' else "–ø—Ä–æ–∂–∏–≤"

    years_left = days_left // 365
    weeks_left = (days_left % 365) // 7
    days = (days_left % 365) % 7
    
    await message.answer_photo(
        photo=FSInputFile(table_image),
        reply_markup=get_main_menu_keyboard()
    )

    await message.answer(
        text=f"{message.from_user.first_name}, —Ç–∏ {lived_text} —Å–≤—ñ–π {lived_weeks}-–π —Ç–∏–∂–¥–µ–Ω—å!\n"
                f"–¢–æ–±—ñ: {years} —Ä–æ–∫—ñ–≤, {remaining_days} –¥–Ω—ñ–≤\n"
                f"–ñ–∏—Ç–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ {years_left} —Ä–æ–∫—ñ–≤ {weeks_left} —Ç–∏–∂–Ω—ñ–≤ —Ç–∞ {days} –¥–Ω—ñ–≤!\n\n"
                f"–ß–∞—Å –º–∏–Ω–∞—î —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –º–∏ –¥—É–º–∞—î–º–æ...",
    )
    
    await state.clear()

@router.callback_query(F.data == "change_birth_date")
async def change_birth_date(callback: CallbackQuery, state: FSMContext):
    """–ó–º—ñ–Ω–∞ –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
    user_id = callback.from_user.id
    user = await get_user(user_id)
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        f"<b>–í–∞—à–∞ –¥–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {user.birth_date}</b>\n"
        "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –Ω–æ–≤—É –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.1990"
    )
    await state.set_state(ProfileStates.waiting_for_new_birth_date)

@router.message(ProfileStates.waiting_for_new_birth_date)
async def process_new_birth_date(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è"""
    try:
        birth_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        user_id = message.from_user.id
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —É –ë–î
        await update_user_birth_date(user_id, birth_date)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        user = await get_user(user_id)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—é
        table_image = generate_life_table(birth_date, user.gender)
        
        today = datetime.now().date()
        total_days = (today - user.birth_date).days
        years = total_days // 365
        remaining_days = total_days % 365
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–∂–∏—Ç—ñ —Ç–∏–∂–Ω—ñ
        lived_weeks = total_days // 7
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∂–∏—Ç—Ç—è (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—ñ)
        total_life_days = 72 * 365 if user.gender == '–ñ—ñ–Ω–∫–∞' else 66 * 365
        days_left = total_life_days - total_days
        lived_text = "–ø—Ä–æ–∂–∏–ª–∞" if user.gender == '–ñ—ñ–Ω–∫–∞' else "–ø—Ä–æ–∂–∏–≤"

        years_left = days_left // 365
        weeks_left = (days_left % 365) // 7
        days = (days_left % 365) % 7
        
        await message.answer_photo(
            photo=FSInputFile(table_image),
            reply_markup=get_main_menu_keyboard()
        )

        await message.answer(
            text=f"{message.from_user.first_name}, —Ç–∏ {lived_text} —Å–≤—ñ–π {lived_weeks}-–π —Ç–∏–∂–¥–µ–Ω—å!\n"
                    f"–¢–æ–±—ñ: {years} —Ä–æ–∫—ñ–≤, {remaining_days} –¥–Ω—ñ–≤\n"
                    f"–ñ–∏—Ç–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ {years_left} —Ä–æ–∫—ñ–≤ {weeks_left} —Ç–∏–∂–Ω—ñ–≤ —Ç–∞ {days} –¥–Ω—ñ–≤!\n\n"
                    f"–ß–∞—Å –º–∏–Ω–∞—î —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –º–∏ –¥—É–º–∞—î–º–æ...",)
            
        await state.clear()
        
    except ValueError:
        await message.answer(
            "–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–†–†–†–†\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.1990"
        )

@router.callback_query(F.data == "delete_data")
async def confirm_delete_data(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "‚ö†Ô∏è –í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ —Å–≤–æ—ó –¥–∞–Ω—ñ? "
        "–¶—è –¥—ñ—è –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ —Å–∫–∞—Å–æ–≤–∞–Ω–∞.",
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(ProfileStates.confirming_delete)

@router.callback_query(ProfileStates.confirming_delete, F.data == "confirm_delete")
async def process_delete_data(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    await callback.answer()
    await callback.message.delete()
    user_id = callback.from_user.id
    
    # –í–∏–¥–∞–ª—è—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await delete_user_data(user_id)
    
    await callback.message.answer(
        "–í–∞—à—ñ –¥–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. "
        "–Ø–∫—â–æ –≤–∏ –∑–∞—Ö–æ—á–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –±–æ—Ç–æ–º –∑–Ω–æ–≤—É, "
        "–ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    
    await state.clear()

@router.callback_query(ProfileStates.confirming_delete, F.data == "cancel_delete")
async def cancel_delete_data(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö"""
    await callback.answer()
    await callback.message.delete()
    await callback.message.answer(
        "–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å–∫–∞—Å–æ–≤–∞–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await callback.answer()
    await callback.message.delete()

@router.callback_query(F.data == "update_table")
async def update_life_table(callback: CallbackQuery):
    """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ –∂–∏—Ç—Ç—è"""
    await callback.answer()
    await callback.message.delete()
    user_id = callback.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await get_user(user_id)
    
    if not user:
        await callback.message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start."
        )
        return
    
    # –ì–µ–Ω–µ—Ä—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —Ç–∞–±–ª–∏—Ü—é
    table_image = generate_life_table(user.birth_date, user.gender)
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–∫ —Ç–∞ —ñ–Ω—à—ñ –¥–∞–Ω—ñ
    today = datetime.now().date()
    total_days = (today - user.birth_date).days
    years = total_days // 365
    remaining_days = total_days % 365
    
    # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø—Ä–æ–∂–∏—Ç—ñ —Ç–∏–∂–Ω—ñ
    lived_weeks = total_days // 7
    
    # –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –¥–Ω—ñ–≤ –∂–∏—Ç—Ç—è (–∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Å—Ç–∞—Ç—ñ)
    total_life_days = 72 * 365 if user.gender == 'female' else 66 * 365
    days_left = total_life_days - total_days
    
    await callback.message.answer_photo(
        photo=FSInputFile(table_image),
        caption=f"{callback.from_user.first_name}, —Ç–∏ –ø—Ä–æ–∂–∏–≤(–ª–∞) —Å–≤—ñ–π {lived_weeks}-–π —Ç–∏–∂–¥–µ–Ω—å!\n"
                f"–¢–æ–±—ñ: {years} —Ä–æ–∫—ñ–≤, {remaining_days} –¥–Ω—ñ–≤\n"
                f"–ñ–∏—Ç–∏ –∑–∞–ª–∏—à–∏–ª–æ—Å—è –≤—Å—å–æ–≥–æ {days_left} –¥–Ω—ñ–≤!\n\n"
                f"–ß–∞—Å –º–∏–Ω–∞—î —à–≤–∏–¥—à–µ, –Ω—ñ–∂ –º–∏ –¥—É–º–∞—î–º–æ...",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "notification_settings")
async def notification_settings(callback: CallbackQuery):
    """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    await callback.answer()
    await callback.message.delete()
    user_id = callback.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await get_user(user_id)
    
    if not user:
        await callback.message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start."
        )
        return
    
    await callback.message.answer(
        "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å:",
        reply_markup=get_notification_settings_keyboard(user.notifications_enabled)
    )

@router.callback_query(F.data == "toggle_notifications")
async def toggle_user_notifications(callback: CallbackQuery):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    await callback.answer()
    await callback.message.delete()
    user_id = callback.from_user.id
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    user = await get_user(user_id)
    
    if not user:
        await callback.message.answer(
            "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –≤–∞—à—ñ –¥–∞–Ω—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑–Ω–æ–≤—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start."
        )
        return
    
    # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞–Ω –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π
    new_state = not user.notifications_enabled
    await toggle_notifications(user_id, new_state)
    
    status = "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" if new_state else "–≤–∏–º–∫–Ω–µ–Ω–æ"
    await callback.message.answer(
        f"–©–æ—Ç–∏–∂–Ω–µ–≤—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è {status}!",
        reply_markup=get_notification_settings_keyboard(new_state)
    )

def register_handlers(dp):
    dp.include_router(router)